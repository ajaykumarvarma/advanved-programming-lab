//Find the repetative substrings in the given string(bag of words)
string=input("Enter a string:")
l=string.split(' ')
s=set(l)
dic={}
c=0
for i in s:
    c=0
    for j in l:
        if i==j:
            c+=1 
    dic[i]=c
for i in dic:
    if dic[i]>1:
        print(i,":",dic[i])
        
---------------------------------------------------------------------------------        
Group anagrams
#include<bits/stdc++.h>
#include
using namespace std;
class Solution {
public:
    /* Utility to check if word is palindrome*/
    bool isPal(string s){
        int i=0,j=s.length()-1;
        while(i<=j){
            if(s[i]!=s[j]){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
    vector<vector<int>> palindromePairs(vector<string>& words) {
        unordered_map<string,int>mp;
        vector<vector<int>>v;
        for(int i=0;i<words.size();i++){
            mp[words[i]]=i;
        }
        for(int i=0;i<words.size();i++){
            for(int j=0;j<=words[i].size();j++){
                string prefix=words[i].substr(0,j);
                string suffix=words[i].substr(j);
                if(isPal(prefix)){
                    string rev=suffix;
                    reverse(rev.begin(),rev.end());
                    if(mp.count(rev) && mp[rev]!=i){
                        v.push_back({mp[rev],i});
                    }
                }
                 if(isPal(suffix)){
                    string rev=prefix;
                    reverse(rev.begin(),rev.end());
                    if(mp.count(rev) && mp[rev]!=i && !suffix.empty()){
                        v.push_back({i,mp[rev]});
                    }
                }
            }
        }
        return v;
    }
};
int main(){
    vector<string> s = {"pa","a","tot","","anagram","cpp","p"};
    vector<vector<int>> v = Solution().palindromePairs(s);
    for (int i = 0; i < v.size(); i++) {
        for (int j = 0; j < v[i].size(); j++)
            cout << v[i][j] << " ";
        cout << endl;
    }
    }
